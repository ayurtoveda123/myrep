The only way to find the largest value in an unsorted array is to look at every value in the array.

Think of it this way. If I gave you 100 index cards with a random number on each card, how would you find the largest number? You'd have to go though all the cards.

So if you had N cards, you have to look at all N of them. So the time complexity is O(N).

The type of algorithm that does this called a linear search algorithm.

PLEASE NOTE: Some answers given here say that parallel processing would find the max value faster. This is true. But no matter how many processors you have, you will still need to 'look' at each value. So the number of operations is still O(N).

To see this think about having a random number on each of 200 index cards. If you are trying to find the max value, you have to look at all of the 200 cards. Now, suppose you enlist a friend to help. You give your friend half of the cards, and each of you finds the max in their half. Compare these and you'll have your answer. Yes, it will take half the time, but both you and your friend will look at 100 cards, so all 200 cards are being looked at. Thus the number of operations is still O(N).

Here's a related, and interesting algorithm.

Go through the first half of the values in the array, and keep track of the greatest value in the first half, H. Then go through the second half of the array. When (and if) you find a value greater than H, stop. Let's call this G.

What is the probability that G is the greatest value in the array?

In order for this to happen, G must be in the second half of the array. Since the array values are random, there is a 50% chance of this.

And then if the second greatest value of the array is in the first half, this would guarantee that we'd pick the actual greatest value.

The probability that the second greatest value is in the first half is also 50%. So the probability that both the second greatest value is in the first half, and that the greatest value is in the second half is 50% x 50% = 25%.

So this algorithm gives us at least a 25% of finding the greatest value in the array.
